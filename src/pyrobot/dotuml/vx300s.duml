ClassDiagram{

// vx300s/arm.py

    // inhirit from Arm
    class vx300sArm{
    configs
    moveit_planner
    use_moveit : bool
    
    __init__(self, configs, moveit_planner)
    go_home(self)
    move_to_neutral(self)
    _setup_joint_pub(self)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    set_joint_velocities(self, velocities, kwargs)
    }

// vx300s/camera.py

    // inhirit from Camera
    class SimpleCamera{
    _tf_listener
    depth_cam
    cam_cf
    base_f
    
    __init__(self, configs)
    get_current_pcd(self, in_cam)
    pix_to_3dpt(self, rs, cs, in_cam)
    get_link_transform(self, src, tgt)
    }

    // inhirit from SimpleCamera
    class LoCoBotCamera{
    set_pan_pub
    set_tilt_pub
    pan : None
    tilt : None
    tol : float
    
    __init__(self, configs)
    _camera_pose_callback(self, msg)
    state(self)
    get_state(self)
    get_pan(self)
    get_tilt(self)
    set_pan(self, pan, wait)
    set_tilt(self, tilt, wait)
    set_pan_tilt(self, pan, tilt, wait)
    reset(self)
    }

    class DepthImgProcesso{
    subsample_pixs : int
    depth_threshold : tuples
    cfg_data
    intrinsic_mat
    intrinsic_mat_inv
    uv_one
    uv_one_in_cam
    
    __init__(self, subsample_pixs, depth_threshold, cfg_filename)
    get_pix_3dpt(self, depth_im, rs, cs)
    get_pcd_ic(self, depth_im, rgb_im)
    get_pcd_iw(self, pts_in_cam, extrinsic_mat)
    read_cfg(self, cfg_filename)
    get_intrinsic(self)
    }

// vx300s/gripper.py

    // inhirit from Gripper
    class vx300sGripper{
    gripper
    wait_time : float
    
    __init__(self, configs, wait_time)
    open(self, position, wait)
    set_gripper_pressure(self, pressure)
    close(self, position, wait)
    }

// core.py

    class Robot{
    configs : bool
    robot_name
    gripper
    
    __init__(self, robot_name, use_arm, use_base, use_camera, use_gripper, arm_config, base_config, camera_config, gripper_config, common_config)
    }

    class Gripper{
    configs
    
    __init__(self, configs)
    open(self, kwargs)
    close(self, kwargs)
    }

    class Camera{
    configs
    cv_bridge
    camera_info_lock
    camera_img_lock
    rgb_img : bool
    depth_img : bool
    camera_info : bool
    camera_P : bool
    rgb_sub
    depth_sub
    sync
    
    __init__(self, configs)
    _sync_callback(self, rgb, depth)
    _camera_info_callback(self, msg)
    get_rgb(self)
    get_depth(self)
    get_rgb_depth(self)
    get_intrinsics(self)
    }

    class Arm{
    configs
    moveit_planner
    planning_time
    use_moveit
    joint_state_lock
    tf_listener
    arm_joint_names
    arm_dof : int
    _joint_angles : dict
    _joint_velocities : dict
    _joint_efforts : dict
    joint_pub : bool
    _ik_service
    _fk_service
    
    __init__(self, configs, moveit_planner, planning_time, analytical_ik, use_moveit)
    go_home(self)
    pose_ee(self)
    get_ee_pose(self, base_frame)
    get_transform(self, src_frame, dest_frame)
    get_joint_angles(self)
    get_joint_velocities(self)
    get_joint_torques(self)
    get_joint_angle(self, joint)
    get_joint_velocity(self, joint)
    get_joint_torque(self, joint)
    set_joint_positions(self, positions, plan, wait, kwargs)
    make_plan_joint_positions(self, positions, kwargs)
    set_joint_velocities(self, velocities, kwargs)
    set_joint_torques(self, torques, kwargs)
    set_ee_pose(self, position, orientation, plan, wait, numerical, kwargs)
    make_plan_pose(self, position, orientation, wait, numerical, kwargs)
    move_ee_xyz(self, displacement, eef_step, numerical, plan, wait,vkwargs)
    _cancel_moveit_goal(self)
    compute_fk_position(self, joint_positions, des_frame)
    get_jacobian(self, joint_angles)
    compute_fk_velocity(self, joint_positions, joint_velocities, des_frame)
    compute_ik(self, position, orientation, qinit, numerical)
    _callback_joint_states(self, msg)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    _init_moveit(self)
    _angle_error_is_small(self, target_joints)
    _loop_angle_pub_cmd(self, cmd, joint_vals)
    _setup_joint_pub(self)
    }

// a: Aggregation, c: Composition, g: inherit

    vx300sArm -g-> Arm;
    SimpleCamera -g-> Camera;
    LoCoBotCamera -g-> SimpleCamera;
    vx300sGripper -g-> Gripper;
    vx300sGripper -c-> vx300sArm;
    LoCoBotCamera -a-> vx300sArm;
    DepthImgProcesso -a-> LoCoBotCamera;
    Arm -a-> Robot;
    Gripper -a-> Robot;
    Camera -a-> Robot;

}    