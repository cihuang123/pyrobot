ClassDiagram{

// allegro_hand/gripper.py

    // import numpy/rospy/threading/time
    // from pyrobot.core import Gripper
    // from std_msgs.msg import String
    // from sensor_msgs.msg import JointState

    // inherit from Gripper

    class AllegroHand{

        __init__(self, configs)
        set_primitive(self, primitive, wait)
        go_home(self)
        move_to_neutral(self)
        set_joint_velocities(self, velocities, kwargs)
        set_joint_positions(self, positions, plan)
        get_joint_angles(self)
        get_joint_velocities(self)
        get_joint_torques(self)
        get_joint_angle(self, joint)
        get_joint_velocity(self, joint)
        get_joint_torque(self, joint)
        set_joint_torques(self, torques, kwargs)
        _pub_joint_torques(self, torques)
        _callback_joint_states(self, msg)
        _pub_joint_positions(self, positions)
        _angle_error_is_small(self, target_joints)
        _setup_joint_pub(self)
        _setup_torque_pub(self)
        _setup_primitive_pub(self)
        open(self, kwargs)
        close(self, kwargs)
    }

// azure_kinect/camera.py

    // from pyrobot.kinect2.camera import AzureKinectCamera  

    // inherit from Kinect2Camera

    class AzureKinectCamera{

        __init__(self, configs)

    }

// habitat/base.py

    // import numpy, math, pyrobot.utils.util, rospy, habitat_sim.agent, habitat_sim.utils, habitat_sim.errors, quaternion
    // from habitat_sim.agent.controls import ActuationSpec
    // from tf.transformations import euler_from_quaternion, euler_from_matrix

    // inherit from object

    class LoCoBotBase{

        __init__(self, configs, simulator)
        execute_action(self, action_name, actuation)
        get_full_state(self)
        _rot_matrix(self, habitat_quat)
        get_state(self, state_type)
        stop(self)
        set_vel(self, fwd_speed, turn_speed, exe_time)
        go_to_relative(self, xyt_position, use_map, close_loop, smooth)
        go_to_absolute(self, xyt_position, use_map, close_loop, smooth)
        _act(self, action_name, actuation)
        _go_to_relative_pose(self, rel_x, rel_y, abs_yaw)
        track_trajectory(self, states, controls, close_loop)
    }

// habitat/camera.py

    // import numpy, pyrobot.utils.util, habitat_sim.agent, habitat_sim.utils 
    // from pyrobot.core import Camera
    // from pyrobot.utils.util import try_cv2_import
    // from cv_bridge import CvBridge, CvBridgeError
    // from pyrobot.locobot.camera import DepthImgProcessor
    // from tf.transformations import euler_from_quaternion, euler_from_matrix

    // inherit from object

    class LoCoBotCamera{
    
        __init__(self, configs, simulator)
        get_rgb(self)
        get_depth(self)
        get_rgb_depth(self)
        get_intrinsics(self)
        pix_to_3dpt(self, rs, cs, in_cam)
        _cam2pyrobot(self, pts)
        _rot_matrix(self, habitat_quat)
        get_current_pcd(self, in_cam)
        state(self)
        get_state(self)
        get_pan(self)
        get_tilt(self)
        set_pan(self, pan, wait)
        set_tilt(self, tilt, wait)
        _compute_relative_pose(self, pan, tilt)
        set_pan_tilt(self, pan, tilt, wait)
        reset(self)
    }

// habitat/simulator.py

    // import copy, habitat_sim
    // from pyrobot.habitat.sim_utils import make_cfg

    // inherit from object

    class HabitatSim{
    
        __init__(self, configs, scene_path, physics_config, seed)
        get_agents()
        get_sensors()
        reset(self)
        set_seed(self, new_seed)
    }

// kinect2/camera.py

    // so many :)

    // inherit from Camera

    class Kinect2Camera{

        __init__(self, configs)
        get_current_pcd(self)
        pix_to_3dpt(self, rs, cs, reduce, k)
    }

// locobot/arm.py

    // import numpy, rospy
    // from locobot_control.analytic_ik import AnalyticInverseKinematics as AIK
    // from locobot_control.srv import JointCommand
    // from pyrobot.core import Arm
    // from std_msgs.msg import Empty

    // inherit from Arm

    class LoCoBotArm{
    
        __init__(self, configs, control_mode, moveit_planne, use_moveit)
        set_joint_velocities(self, velocities, kwargs)
        set_joint_torque(self, joint_name, value)
        set_ee_pose_pitch_roll(self, position, pitch, roll, plan, wait, numerical, kwargs)
        set_joint_torques(self, torques, kwargs)
        go_home(self, plan)
    }

// locobot/base_controllers.py

    class ProportionalControl{

    __init__(self, bot_base, ctrl_pub, configs, action_server)
    _cmd_vel(self, lin_vel, rot_vel)
    stop(self)
    _norm_pose(self, data)
    _step_angle(self, action)
    _step_x(self, action)
    goto(self, xyt_position)
    _get_xyt(self, pose)
    go_to_absolute(self, xyt_position, close_loop, smooth)
    }

    // inherit from TrajectoryTracker
    class ILQRControl{
    
    __init__(self, bot_base, ctrl_pub, configs, action_server)
    should_stop(self)
    should_stop(self, value)
    state(self)
    go_to_relative(self, xyt_position, close_loop, smooth)
    go_to_absolute(self, xyt_position, close_loop, smooth)
    _compute_trajectory_no_map(self, start_pos, goal_pos, smooth, reverse)
    track_trajectory(self, states, controls, close_loop)
    }

    // inherit from object
    class MoveBaseControl{
    
    __init__(self, base_state, configs, action_server)
    cancel_goal(self)
    _move_base_status_callback(self, msg)
    _send_action_goal(self, x, y, theta, frame)
    go_to_absolute(self, xyt_position, close_loop, smooth)
    }

// locobot/base_control_utils.py

    class MoveBasePlanner{
    
    __init__(self, configs, action_server)
    _compute_relative_ang_dist(self, point2)
    get_plan_absolute(self, x, y, theta)
    parse_plan(self, plan)
    move_to_goal(self, goal, go_to_relative)
    get_state_trajectory_from_controls(start_pos, dt, controls)
    get_control_trajectory(trajectory_type, T, v, w)
    get_trajectory_circle(start_pos, dt, r, v, angle)
    get_trajectory_negcircle(start_pos, dt, r, v, angle)
    }

    // inherit from object
    class TrajectoryTracker{

    __init__(self, system, action_server)
    generate_plan(self, xs, us)
    _compute_controls(self, start_state, plan)
    stop(self)
    execute_plan(self, plan, close_loop)
    plot_plan_execution(self, file_name)
    }

    // inherit from object
    class LQRSolver{

    __init__(self, As, Bs, Cs, Qs, Rs, x_refs, u_refs)
    solve(self)
    _one_step(self, A, B, C, Q_q_q_, R, P_p_p_)
    get_control(self, x, i)
    get_control_ls(self, x, alpha, i)
    get_cost_to_go(self, x, i)
    }

    // inherit from object
    class ILQRSolver{
    
    __init__(self, dyn_fn, Q_fn, R_fn, start_state, goal_state)
    unroll(self, dyn_fn, start_state, controls)
    solve(self, init_controls, ilqr_iters)
    get_step_size(self, lqr_, ref_controls, ref_cost, ilqr_iter)
    }

    class SimpleGoalState{
    check_server_client_link(client)
    }

    class LocalActionStatus{
    
    }

    // inherit from object
    class LocalActionServer{
    
    __init__(self)
    is_preempt_requested(self)
    get_state(self)
    _set_state(self, state)
    cancel_goal(self)
    set_preempted(self)
    set_succeeded(self)
    set_aborted(self)
    set_active(self)
    is_disabled(self)
    disable(self)
    is_available(self)
    }

// locobot/base

    // inherit from object
    class BaseSafetyCallbacks{
    
    __init__(self, base)
    bumper_callback_create(self, data)
    cliff_callback(self, data)
    wheeldrop_callback(self, data)
    bumper_callback_kobuki(self, date)
    __del__(self)
    }

    // inherit from object
    class XYTState{
    
    __init__(self)
    update(self, x, y, theta)
    state_f(self)
    }

    // inherit from BaseSafetyCallbacks
    class BaseState{
    
    __init__(self, base, build_map, map_img_dir, configs)
    _get_odom_state(self)
    _odometry_callback(self, msg, state_var)
    __del__(self)
    }

    // inherit from Base
    class LoCoBotBase{
    
    __init__(self, configs, map_img_dir, base_controller, base_planner, base)
    load_planner(self, base_planner)
    load_controller(self, base_controller)
    _execute_controller(self, goal)
    _track_trajectory(self)
    _go_to_absolute(self)
    clean_shutdown(self)
    get_state(self, state_type)
    get_plan(self, xyt_position)
    _wait(self, wait)
    go_to_relative(self, xyt_position, use_map, close_loop, smooth, wait)
    go_to_absolute(self, xyt_position, use_map, close_loop, smooth, wait)
    get_last_goal_result(self)
    cancel_last_goal(self, stop_robot)
    track_trajectory(self, states, controls, close_loop, wait)
    }

// locobot/bicycla_model.py

    //inherit from object
    class Foo{
    
    __init__(self, kwargs)
    __str__(self)
    wrap_theta(theta)
    subplot(plt, Y_X, sz_y_sz_x, space_y_x)
    get_rng(rng)
    }

    class BicycleSystem{
    
    __init__(self, dt, min_v, max_v, min_w, max_w)
    get_system_cost(self, x_traj, x_ref)
    dynamics_fn(self, x_ref, u_ref)
    get_control_cost(self, u_ref)
    unroll(self, start_state, controls)
    }

// locobot/camera.py

    // inherit from Camera
    class SimpleCamera{
    
    __init__(self, configs)
    get_current_pcd(self, in_cam)
    pix_to_3dpt(self, rs, cs, in_cam)
    get_link_transform(self, src, tgt)
    }

    // inherit from SimpleCamera
    class LoCoBotCamera{
    
    __init__(self, configs)
    _camera_pose_callback(self, msg)
    state(self)
    get_state(self)
    get_pan(self)
    get_tilt(self)
    set_pan(self, pan, wait)
    set_tilt(self, tilt, wait)
    set_pan_tilt(self, pan, tilt, wait)
    reset(self)
    }

    class DepthImgProcessor{
    
    __init__(self, subsample_pixs, depth_threshold, cfg_filename)
    get_pix_3dpt(self, depth_im, rs, cs)
    get_pcd_ic(self, depth_im, rgb_im)
    get_pcd_iw(self, pts_in_cam, extrinsic_mat)
    read_cfg(self, cfg_filename)
    get_intrinsic(self)
    }

// locobot/gripper.py

    // inherit from Gripper
    class LoCoBotGripper{
    
    __init__(self, configs, wait_time)
    get_gripper_state(self)
    open(self, wait)
    reset(self, wait)
    close(self, wait)
    _callback_gripper_state(self, msg)
    }

// sawyer/arm.py

    // inherit from Arm
    class SawyerArm{
    
    __init__(self, configs, moveit_planner)
    go_home(self)
    move_to_neutral(self)
    get_collision_state(self)
    _setup_joint_pub(self)
    _callback_collision(self, data)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    }

// sawyer/gripper.py

    // inherit from Gripper
    class SawyerGripper{
    
    __init__(self, configs, ee_name, calibrate, wait_time)
    open(self, position, wait)
    reset(self, wait)
    close(self, position, wait)
    }

// ur5/arm.py

    // inherit from Arm
    class UR5Arm{
    
    __init__(self, configs, moveit_planner)
    go_home(self)
    move_to_neutral(self)
    _setup_joint_pub(self)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    set_joint_velocities(self, velocities, kwargs)
    }

// utils/move_group_interface.py

    // inherit from object
    class MoveGroupInterface{
    
    __init__(self, group, fixed_frame, gripper_frame, cart_srv, mp_srv, listener, plan_only)
    get_move_action(self)
    moveToJointPosition(self, joints, positions, tolerance, wait, kwargs)
    moveToPose(self, pose, tolerance, wait, kwargs)
    followCartesian(self, way_points, way_point_frame, max_step, jump_threshold, link_name,   start_state, avoid_collisions)
    motionPlanToJointPosition(self, joints, positions, tolerance, wait, kwargs)
    motionPlanToPose(self, pose, tolerance, wait, kwargs)
    setPlannerId(self, planner_id)
    setPlanningTime(self, time)
    }

// utils/planning_scene_interface.py

    // inherit from object
    class PlanningSceneInterface{
    
    __init__(self, frame, ns, init_from_service)
    sendUpdate(self, collision_object, attached_collision_object, use_service)
    clear(self)
    makeMesh(self, name, ps, filename)
    makeSolidPrimitive(self, name, solid, ps)
    makeAttached(self, link_name, obj, touch_links, detach_posture, weight)
    addMesh(self, name, ps, filename, use_service)
    attachMesh(self, name, ps, filename, link_name, touch_links, detach_posture, weight, use_service)
    addSolidPrimitive(self, name, solid, ps, use_service)
    addCylinder(self, name, height, radius, ps, use_service)
    addBox(self, name, size_x, size_y, size_z, ps, use_service)
    attachBox(self, name, size_x, size_y, size_z, pose, link_name, touch_links, detach_posture, weight, use_service)
    removeCollisionObject(self, name, use_service)
    removeAttachedObject(self, name, use_service)
    sceneCb(self, msg, initial)
    getKnownCollisionObjects(self)
    getKnownAttachedObjects(self)
    waitForSync(self, max_time)
    setColor(self, name, r, g, b, a)
    sendColors(self)
    }

// utils/util.py

    // inherit from object
    class MoveitObjectHandler{
    
    __init__(self, frame)
    add_world_object(self, id_name, pose, size, frame)
    remove_world_object(self, id_name)
    attach_arm_object(self, link_name, id_name, pose, size)
    detach_arm_object(self, link_name, id_name, remove_from_world)
    remove_all_objects(self)
    add_table(self, pose, size)
    add_kinect(self, pose, size)
    add_gripper(self, pose, size)
    remove_table(self)
    remove_gripper(self)
    }

// vrep_locobot/arm.py

    // inhirit from object
    class LoCoBotArm{
    
    __init__(self, configs, simulator)
    compute_fk_position(self, joint_positions)
    compute_fk_velocity(self, joint_positions, joint_velocities, des_frame)
    _quaternion_multiply(self, quaternion1, quaternion0)
    compute_ik(self, position, orientation, qinit, numerical)
    pose_ee(self)
    get_ee_pose(self, base_frame)
    go_home(self, plan)
    get_transform(self, src_frame, dest_frame)
    get_joint_angles(self)
    get_joint_velocities(self)
    get_joint_torques(self)
    get_joint_angle(self, joint)
    get_joint_velocity(self, joint)
    get_joint_torque(self, joint)
    set_joint_velocities(self, velocities, kwargs)
    set_joint_torques(self, torques, kwargs)
    set_joint_positions(self, positions, plan, wait, kwargs)
    set_ee_pose(self, position, orientation, plan, wait, numerical, kwargs)
    move_ee_xyz(self, displacement, eef_step, numerical, plan, kwargs)
    set_ee_pose_pitch_roll(self, position, pitch, roll, plan, wait, numerical, kwargs)
    }

// vrep_locobot/base.py

    // inhirit from object
    class LoCoBotBase{
    
    __init__(self, configs, simulator)
    get_full_state(self)
    in_collision(self)
    get_state(self)
    stop(self)
    set_vel(self, fwd_speed, turn_speed, exe_time)
    go_to_relative(self, xyt_position, use_map, close_loop, smooth)
    go_to_absolute(self, xyt_position, use_map, close_loop, smooth)
    track_trajectory(self, states, controls, close_loop)
    }

// vrep_locobot/camera.py

    // inhirit from Camera
    class LoCoBotCamera{
    
    __init__(self, configs, simulator)
    get_rgb(self)
    get_depth(self)
    get_rgb_depth(self)
    get_intrinsics(self)
    pix_to_3dpt(self, rs, cs, in_cam)
    get_current_pcd(self, in_cam)
    state(self)
    get_state(self)
    get_pan(self)
    get_tilt(self)
    set_pan(self, pan ,wait)
    set_tilt(self, tilt, wait)
    set_pan_tilt(self, pan, tilt, wait)
    reset(self)
    }

// vrep_locobot/gripper.py

    class LoCoBotGripper{
    
    __init__(self, configs, simulator, wait_time)
    get_gripper_state(self)
    open(self, wait)
    close(self, wait)
    reset(self, wait)
    }

// vrep_locobot/simulator.py

    // inhirit from object
    class VrepSim{
    
    __init__(self, configs, scene_path, seed)
    __del__(self)
    reset(self)
    }

// vx300s/arm.py

    // inhirit from Arm
    class vx300sArm{
    
    __init__(self, configs, moveit_planner)
    go_home(self)
    move_to_neutral(self)
    _setup_joint_pub(self)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    set_joint_velocities(self, velocities, kwargs)
    }

// vx300s/camera.py

    // inhirit from Camera
    class SimpleCamera{
    
    __init__(self, configs)
    get_current_pcd(self, in_cam)
    pix_to_3dpt(self, rs, cs, in_cam)
    get_link_transform(self, src, tgt)
    }

    // inhirit from SimpleCamera
    class LoCoBotCamera{
    
    __init__(self, configs)
    _camera_pose_callback(self, msg)
    state(self)
    get_state(self)
    get_pan(self)
    get_tilt(self)
    set_pan(self, pan, wait)
    set_tilt(self, tilt, wait)
    set_pan_tilt(self, pan, tilt, wait)
    reset(self)
    }

    class DepthImgProcesso{
    
    __init__(self, subsample_pixs, depth_threshold, cfg_filename)
    get_pix_3dpt(self, depth_im, rs, cs)
    get_pcd_ic(self, depth_im, rgb_im)
    get_pcd_iw(self, pts_in_cam, extrinsic_mat)
    read_cfg(self, cfg_filename)
    get_intrinsic(self)
    }

// vx300s/gripper.py

    // inhirit from Gripper
    class vx300sGripper{
    
    __init__(self, configs, wait_time)
    open(self, position, wait)
    set_gripper_pressure(self, pressure)
    close(self, position, wait)
    }

// core.py

    class Robot{
    
    __init__(self, robot_name, use_arm, use_base, use_camera, use_gripper, arm_config, base_config, camera_config, gripper_config, common_config)
    }

    // inhirit from object
    class Base{
    
    __init__(self, configs)
    stop(self)
    set_vel(self, fwd_speed, turn_speed, exe_time)
    go_to_relative(self, xyt_position, use_map, close_loop, smooth)
    go_to_absolute(self, xyt_position, use_map, close_loop, smooth)
    track_trajectory(self, states, controls, close_loop)
    get_state(self, state_type)
    }

    // inhirit from object
    class Gripper{
    
    __init__(self, configs)
    open(self, kwargs)
    close(self, kwargs)
    }

    // inhirit from object
    class Camera{
    
    __init__(self, configs)
    _sync_callback(self, rgb, depth)
    _camera_info_callback(self, msg)
    get_rgb(self)
    get_depth(self)
    get_rgb_depth(self)
    get_intrinsics(self)
    }

    // inhirit from object
    class Arm{
    
    __init__(self, configs, moveit_planner, planning_time, analytical_ik, use_moveit)
    go_home(self)
    pose_ee(self)
    get_ee_pose(self, base_frame)
    get_transform(self, src_frame, dest_frame)
    get_joint_angles(self)
    get_joint_velocities(self)
    get_joint_torques(self)
    get_joint_angle(self, joint)
    get_joint_velocity(self, joint)
    get_joint_torque(self, joint)
    set_joint_positions(self, positions, plan, wait, kwargs)
    make_plan_joint_positions(self, positions, kwargs)
    set_joint_velocities(self, velocities, kwargs)
    set_joint_torques(self, torques, kwargs)
    set_ee_pose(self, position, orientation, plan, wait, numerical, kwargs)
    make_plan_pose(self, position, orientation, wait, numerical, kwargs)
    move_ee_xyz(self, displacement, eef_step, numerical, plan, wait,vkwargs)
    _cancel_moveit_goal(self)
    compute_fk_position(self, joint_positions, des_frame)
    get_jacobian(self, joint_angles)
    compute_fk_velocity(self, joint_positions, joint_velocities, des_frame)
    compute_ik(self, position, orientation, qinit, numerical)
    _callback_joint_states(self, msg)
    _pub_joint_positions(self, positions)
    _pub_joint_velocities(self, velocities)
    _pub_joint_torques(self, torques)
    _init_moveit(self)
    _angle_error_is_small(self, target_joints)
    _loop_angle_pub_cmd(self, cmd, joint_vals)
    _setup_joint_pub(self)
    }



}